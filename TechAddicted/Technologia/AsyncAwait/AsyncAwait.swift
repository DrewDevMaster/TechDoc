//
//  AsyncAwait.swift
//  TechAddicted
//
//  Created by Drew on 05.06.2025.
//

import SwiftUI

struct User2: Decodable {
    let id: Int
    let name: String
    let email: String
}

final class UserService {
    func fetchUser() async throws -> User2 {
        let url = URL(string: "https://jsonplaceholder.typicode.com/users/1")!
        let (data, _) = try await URLSession.shared.data(from: url)
        return try JSONDecoder().decode(User2.self, from: data)
    }
}

@MainActor
final class UserViewModel1: ObservableObject {
    @Published var user: User2?
    @Published var isLoading = false
    @Published var errorMessage: String?

    private let service = UserService()

    func loadUser() {
        Task {
            /*
            let result = try? await service.fetchUser()
            if let name = result?.name {
                print(name)
            }
             */
            do {
                isLoading = true
                let result = try await service.fetchUser()
                user = result
            } catch {
                errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: \(error.localizedDescription)"
            }
            isLoading = false
        }
    }
}

struct AsyncSampleContentView: View {
    @StateObject var vm = UserViewModel1()

    var body: some View {
        VStack {
            if vm.isLoading {
                ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞...")
            } else if let user = vm.user {
                Text("–ò–º—è: \(user.name)")
                Text("Email: \(user.email)")
            } else if let error = vm.errorMessage {
                Text(error).foregroundColor(.red)
            }

            Button("–ó–∞–≥—Ä—É–∑–∏—Ç—å") {
                vm.loadUser()
            }
        }
        .padding()
    }
}

/*
 
 üöÄ –£—Ä–æ–∫ 1: async/await ‚Äî –û—Å–Ω–æ–≤—ã

 üîß –¶–µ–ª—å

 –ü–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤ Swift –Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ.

 ‚úÖ –ß—Ç–æ –º—ã —Ä–∞–∑–±–µ—Ä—ë–º
     ‚Ä¢    async –∏ await –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
     ‚Ä¢    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å completion-–∞–º–∏
 
 üîç 1. –ß—Ç–æ —Ç–∞–∫–æ–µ async throws
 
 func fetchUser() async throws -> User
 
 ‚Ä¢    async ‚Äî –≥–æ–≤–æ—Ä–∏—Ç –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É: —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Ç–æ –µ—Å—Ç—å –æ–Ω–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏ –ø–æ—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º ‚Äî –≥–ª–∞–≤–Ω—ã–π UI-–ø–æ—Ç–æ–∫).
 ‚Ä¢    throws ‚Äî –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ try / do-catch.

üëâ –í —Å–≤—è–∑–∫–µ:
 ‚Ä¢    async throws ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –¥–æ–ª–≥–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å) –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π.

‚∏ª

üîç 2. –ß—Ç–æ —Ç–∞–∫–æ–µ try await ‚Äî –º–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å try? await –∏–ª–∏ try! await
 
 let (data, _) = try await URLSession.shared.data(from: url)
 
 –ó–¥–µ—Å—å:
     ‚Ä¢    await –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ø–æ–¥–æ–∂–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏¬ª.
     ‚Ä¢    try –≥–æ–≤–æ—Ä–∏—Ç: ¬´—ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, –∏ –º—ã –µ—ë –ª–æ–≤–∏–º¬ª.

 –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º—ã:

 ‚úÖ try await ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±, —Ç—Ä–µ–±—É–µ—Ç do/catch
 
 do {
     let result = try await fetchUser()
 } catch {
     print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \(error)")
 }
 
 ‚úÖ try? await ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: –≤–µ—Ä–Ω—ë—Ç nil, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
 let result = try? await fetchUser()
 if let name = result?.name {
     print(name)
 }
 
 
 üîç 3. –ß—Ç–æ —Ç–∞–∫–æ–µ @MainActor –∏ –ø–æ—á–µ–º—É –æ–Ω —Å—Ç–∞–≤–∏—Ç—Å—è –Ω–∞ –≤–µ—Å—å –∫–ª–∞—Å—Å
 @MainActor
 final class UserViewModel: ObservableObject {
    ...
 }
 
 ‚Ä¢    @MainActor –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤–µ—Å—å –∫–æ–¥ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
 ‚Ä¢    –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ, –∫–æ–≥–¥–∞ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å UI (@Published, SwiftUI) ‚Äî –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è UI –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏—à—å –±–∞–≥–∏ –∏–ª–∏ –∫—Ä–∞—à–∏.

–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @MainActor:
 ‚Ä¢    üîπ –Ω–∞ –∫–ª–∞—Å—Å–µ ‚Äî —Ç–æ–≥–¥–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
 ‚Ä¢    üî∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—ë:
 
 @MainActor
 func updateUI() { ... }
 ‚úÖ –í —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö @MainActor –Ω–∞ –≤–µ—Å—å ViewModel ‚Äî —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.

 üß† –°—É—Ç—å: –Ω–µ –≤–µ—Å—å –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ

 –¢—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤:
     ‚Ä¢    UI –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
     ‚Ä¢    —Ç—è–∂—ë–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –ø–∞—Ä—Å–∏–Ω–≥, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏/–±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
 
 üéØ –ö–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —Å @MainActor –∏ Task

 –¢—ã –º–æ–∂–µ—à—å —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @MainActor, –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏, –≤–æ—Ç –∫–∞–∫:
 */

final class UserViewModel111: ObservableObject {
    
    @Published var userName: String = ""
    var filteredUsers = [User2]()
    func loadUser() {
        Task {
            // 1Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            let user = try await UserService().fetchUser()
            
            // 2Ô∏è‚É£ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            await MainActor.run {
                self.userName = user.name
            }
        }
    }
    
    //‚úÖ –ü—Ä–∏–º–µ—Ä: —Ç—è–∂—ë–ª–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞

    func filterLargeList(_ items: [User2]) {
        Task {
            let result = await withCheckedContinuation { continuation in
                DispatchQueue.global().async {
                    let filtered = items.filter { $0.name.contains("a") }
                    continuation.resume(returning: filtered)
                }
            }

            await MainActor.run {
                self.filteredUsers = result
            }
        }
    }
}







