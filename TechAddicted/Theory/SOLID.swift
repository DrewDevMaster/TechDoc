//
//  SOLID.swift
//  TechAddicted
//
//  Created by ViktorM1Max on 18.06.2025.
//

import Foundation

/*
 üí° –ü–æ—á–µ–º—É SOLID –≤–∞–∂–µ–Ω:
     ‚Ä¢    –ü–æ–≤—ã—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
     ‚Ä¢    –û–±–ª–µ–≥—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
     ‚Ä¢    –î–µ–ª–∞–µ—Ç –∫–æ–¥ –≥–∏–±–∫–∏–º –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–º
     ‚Ä¢    –£–º–µ–Ω—å—à–∞–µ—Ç –±–∞–≥–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
 
 
 
============== S ==============
 
 S ‚Äî Single Responsibility Principle

 –û–¥–∏–Ω –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.

 ‚úÖ –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É.
 ‚ùå –ù–µ –Ω—É–∂–Ω–æ —Å–º–µ—à–∏–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ.
 
 
 
 ============== O ==============
 
 O ‚Äî Open/Closed Principle

 –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.

 ‚úÖ –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞, —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.
 
 –ü—Ä–∏–º–µ—Ä:
 
 protocol Shape {
     func area() -> Double
 }

 class Circle: Shape { ... }
 class Square: Shape { ... }

 func totalArea(shapes: [Shape]) -> Double {
     return shapes.reduce(0) { $0 + $1.area() }
 }
 
 –ï—Å–ª–∏ —Ç—ã –¥–æ–±–∞–≤–∏—à—å Triangle, —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å totalArea() ‚Üí —ç—Ç–æ Open/Closed.
 
 
 
 ============== L ==============
 
 L ‚Äî Liskov Substitution Principle

 –û–±—ä–µ–∫—Ç—ã –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω—è–µ–º—ã–º–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–æ–≤ –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏.

 ‚úÖ –ü–æ–¥–∫–ª–∞—Å—Å—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ª–æ–º–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤.
 
 === –ü–ª–æ—Ö–æ ===
 class Bird {
     func fly() {}
 }

 class Ostrich: Bird {
     override func fly() {
         // Ostrich can't fly ‚ùå
     }
 }
 
 === –•–æ—Ä–æ—à–æ ===
 –õ—É—á—à–µ —Å–æ–∑–¥–∞—Ç—å FlyingBird –∏ NonFlyingBird.
 
 
 
 ============== I ==============
 
 I ‚Äî Interface Segregation Principle

 –ù–µ –∑–∞—Å—Ç–∞–≤–ª—è–π –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç.

 ‚úÖ –õ—É—á—à–µ –º–Ω–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, —á–µ–º –æ–¥–∏–Ω ‚Äú–≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π‚Äù.

 === –ü–ª–æ—Ö–æ ===
 protocol Printer {
     func print()
     func scan()
     func fax()
 }
 
 === –•–æ—Ä–æ—à–æ ===
 protocol Printable { func print() }
 protocol Scannable { func scan() }
 protocol Faxable   { func fax() }
 
 
 
 ============== D ==============
 
 D ‚Äî Dependency Inversion Principle

 –ú–æ–¥—É–ª–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –º–æ–¥—É–ª–µ–π –Ω–∏–∂–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è. –û–±–∞ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π.

 ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å—ã.
 
 === –ü–ª–æ—Ö–æ ===
 class UserService {
     let network = RealNetwork() // –∂—ë—Å—Ç–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚ùå
 }
 
 === –•–æ—Ä–æ—à–æ ===
 protocol Network {
     func fetchData()
 }

 class RealNetwork: Network { ... }

 class UserService {
     let network: Network
     init(network: Network) {
         self.network = network
     }
 }
 
 */
