//
//  WithCheckedContinuationExamples.swift
//  SwiftConcurrencyPlayground
//
//  Created by ChatGPT
//

import Foundation

// MARK: - –û—Å–Ω–æ–≤—ã: –ß—Ç–æ —Ç–∞–∫–æ–µ withCheckedContinuation

/*
 withCheckedContinuation ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –æ–±–µ—Ä–Ω—É—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞ –∫–æ–ª–±—ç–∫–∞—Ö
 (completion handlers) –≤ –∫—Ä–∞—Å–∏–≤—ã–π async/await —Å—Ç–∏–ª—å.

 –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:
 - –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ API, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–æ Swift Concurrency
 - –î–∞—ë—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –∫–æ–≥–¥–∞ –∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
 - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–æ—Å—Ç–∞—Ö –º–µ–∂–¥—É Combine, NotificationCenter, CoreBluetooth, –∏ —Ç.–ø.
 */

// MARK: - –ü—Ä–∏–º–µ—Ä 1: –≠–º—É–ª—è—Ü–∏—è async-—Ñ—É–Ω–∫—Ü–∏–∏

func oldAsyncFunc(completion: @escaping (String) -> Void) {
    DispatchQueue.global().asyncAfter(deadline: .now() + 1) {
        completion("–ì–æ—Ç–æ–≤–æ!")
    }
}

func newAsyncFunc() async -> String {
    await withCheckedContinuation { continuation in
        oldAsyncFunc { result in
            continuation.resume(returning: result)
        }
    }
}

// MARK: - –ü—Ä–∏–º–µ—Ä 2: –í–µ—Ä—Å–∏—è —Å –æ—à–∏–±–∫–∞–º–∏ (throwing)

enum NetworkError: Error {
    case invalidData
}

func simulateDownload(completion: @escaping (Result<Data, Error>) -> Void) {
    DispatchQueue.global().asyncAfter(deadline: .now() + 1) {
        if Bool.random() {
            completion(.success(Data("OK".utf8)))
        } else {
            completion(.failure(NetworkError.invalidData))
        }
    }
}

func downloadFileAsync() async throws -> Data {
    try await withCheckedThrowingContinuation { continuation in
        simulateDownload { result in
            switch result {
            case .success(let data):
                continuation.resume(returning: data)
            case .failure(let error):
                continuation.resume(throwing: error)
            }
        }
    }
}

// MARK: - –ü—Ä–∏–º–µ—Ä 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Task

@MainActor
final class SampleViewModel: ObservableObject {
    @Published var resultText: String = "–û–∂–∏–¥–∞–Ω–∏–µ..."

    func load() {
        Task {
            let result = await newAsyncFunc()
            self.resultText = result
        }
    }

    func loadWithErrorHandling() {
        Task {
            do {
                let data = try await downloadFileAsync()
                self.resultText = "–ó–∞–≥—Ä—É–∂–µ–Ω–æ: \(data.count) –±–∞–π—Ç"
            } catch {
                self.resultText = "–û—à–∏–±–∫–∞: \(error.localizedDescription)"
            }
        }
    }
}

// MARK: - –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ

/*
 –£—Å–ª–æ–≤–∏–µ:
 –£ —Ç–µ–±—è –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è:

 func simulateNetworkCall(completion: @escaping (String?) -> Void) {
     DispatchQueue.global().asyncAfter(deadline: .now() + 1.5) {
         completion("–ü—Ä–∏–≤–µ—Ç –∏–∑ —Å–µ—Ç–∏!")
     }
 }

 –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é:

 func fetchText() async -> String

 –ò—Å–ø–æ–ª—å–∑—É–π withCheckedContinuation –∏ –≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ nil ‚Äî –≤–µ—Ä–Ω–∏ "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö".
 */

func simulateNetworkCall(completion: @escaping (String?) -> Void) {
    DispatchQueue.global().asyncAfter(deadline: .now() + 1.5) {
        completion("–ü—Ä–∏–≤–µ—Ç –∏–∑ —Å–µ—Ç–∏!")
    }
}

// TODO: –ù–∞–ø–∏—à–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∑–¥–µ—Å—å:
func fetchText() async -> String {
    await withCheckedContinuation { continuation in
        simulateNetworkCall { resultString in
            let finalStr = resultString ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            continuation.resume(returning: finalStr)
        }
    }
}


//1.    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ async –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏? –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
//2.    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç await –∏ –ø–æ—á–µ–º—É –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω? –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –Ω–µ –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–µ–π—á–∞—Å –∞ –¥–æ–∂–¥–∞—Ç—Å—è –ø–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª—É—á–∞–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
//3.    –ö–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å try await, –∞ –∫–æ–≥–¥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ await? –ò—Å–ø–æ–ª—å–∑—É–µ–º try –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è throw –∏ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∫–æ—Ç–æ—Ä—É—é –º—ã —Å–º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
//4.    –ß–µ–º try? –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç try! –∏ –æ–±—ã—á–Ω–æ–≥–æ try? –í —Å–ª—É—á–∞–∏ —Å try? –ø—Ä–∏ –æ—à–∏–±–∫–µ –Ω–∞–º –≤–µ—Ä–Ω–µ—Ç nil, –≤ try –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –±—É–¥–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –æ–±—Ä–∞–±—Ç–∫–∏ –æ—à–∏–±–∫–∏, –∞ force –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ nil –Ω–µ –±—É–¥–µ—Ç
//5.    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç @MainActor? –í –∫–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –µ–≥–æ —Å—Ç–æ–∏—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫–æ –≤—Å–µ–º—É –∫–ª–∞—Å—Å—É, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∫ —Ñ—É–Ω–∫—Ü–∏–∏? @MainActor –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –ú–æ–∂–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–µ –µ—Å–ª–∏ —Ç–∞–º –Ω–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –Ω–æ –∏–Ω–∞—á–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä detached –∏–ª–∏ await MainActor.run {}
//6.    –ß—Ç–æ —Ç–∞–∫–æ–µ Task –∏ –∫–∞–∫–∏–µ –ø–ª—é—Å—ã –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Task {} –≤–Ω—É—Ç—Ä–∏ ViewModel? –ù–µ –∑–Ω–∞—é, –º—ã —ç—Ç–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏
//7.    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç withCheckedContinuation –∏ –≤ –∫–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –æ–Ω —Ç–µ–±–µ –Ω—É–∂–µ–Ω? withChackedContinuation –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ä—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ async/await
//8.    –í —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É withCheckedContinuation –∏ withCheckedThrowingContinuation? withCheckedThrowingContinuation –º–æ–∂–µ—Ç —Ç–∞–∫–∂–µ –æ—Ç–¥–∞–≤–∞—Ç—å –±–ª–æ–∫ —Å –æ—à–∏–±–∫–æ–π –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å

//üß™ –ó–∞–¥–∞–Ω–∏–µ 1
//–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
//    1.    –°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é loginAsync(username:) async throws -> String
//    2.    –û–±–µ—Ä–Ω–∏ fakeLogin –≤ withCheckedThrowingContinuation
//    3.    –û–±—Ä–∞–±–æ—Ç–∞–π –µ—ë —Å do/catch –≤ Task {}

func fakeLogin1234(username: String, completion: @escaping (Result<String, Error>) -> Void) {
    DispatchQueue.global().asyncAfter(deadline: .now() + 1.0) {
        if username == "admin" {
            completion(.success("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, admin"))
        } else {
            completion(.failure(NSError(domain: "Login", code: 401, userInfo: [NSLocalizedDescriptionKey: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω"])))
        }
    }
}

func loginAsync(username: String) async throws -> String {
    try await withCheckedThrowingContinuation { continuaton in
        fakeLogin1234(username: username) { result in
            
            continuaton.resume(with: result)
            
            /*
            –ò–ª–∏ –º–æ–∂–Ω–æ —Ç–∞–∫, –µ—Å–ª–∏ —è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª —Ç–æ —Ä–∞–∑–Ω–∏—Ü—ã –Ω–µ –±—É–¥–µ—Ç
             
            switch result {
            case .success(let text):
                continuaton.resume(returning: text)
            case .failure(let error):
                continuaton.resume(throwing: error)
            }
             */
        }
    }
}

final class LoginTestViewModel: ObservableObject {
    
    @Published var loginStateString = ""
    @Published var showErrorUIForLoginState = false
    
    func usageofLoginAsync() {
        Task {
            do {
                let result = try await loginAsync(username: "some_username")
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                await MainActor.run {
                    self.loginStateString = result
                }
            } catch {
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                await MainActor.run {
                    self.loginStateString = error.localizedDescription
                    self.showErrorUIForLoginState = true
                }
            }
        }
    }
}

/*
üß™ –ó–∞–¥–∞–Ω–∏–µ 2: @MainActor –∏ UI
    1.    –°–æ–∑–¥–∞–π @MainActor final class UserViewModel: ObservableObject
    2.    –î–æ–±–∞–≤—å Published-—Å–≤–æ–π—Å—Ç–≤–æ @Published var status: String = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
    3.    –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ authorize() ‚Äî –æ–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç Task, –≤—ã–∑—ã–≤–∞–µ—Ç loginAsync, –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç status
*/

@MainActor
final class UserViewModel: ObservableObject {
    
    @Published var status: String = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
    
    func authorize() {
        Task {
            do {
                let result = try await loginAsync(username: "some_username")
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                await MainActor.run {
                    self.status = result
                }
            } catch {
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                await MainActor.run {
                    self.status = error.localizedDescription
                }
            }
        }
    }
}

/*
 üß™ –ó–∞–¥–∞–Ω–∏–µ 3: –ü–æ–Ω–∏–º–∞–Ω–∏–µ try/await

 –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –∏ –ø–æ—á–µ–º—É?
 */

func failableAsync() async throws -> String {
    throw URLError(.notConnectedToInternet)
}

func safeCaller() async {
    let value = try? await failableAsync()
    print(value ?? "–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è")
}
//–û—Ç–≤–µ—Ç
//print –Ω–µ –≤—ã–≤–µ–¥–µ—Ç —Å—Ç—Ä–æ–∫—É "–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è" —Ç–∞–∫ –∫–∞–∫ –º—ã —è–≤–Ω–æ –æ—Ç–¥–∞–µ–º –æ—à–∏–±–∫—É throw URLError(.notConnectedToInternet) –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç –µ–µ –∏ –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—å–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –∫–æ–¥ –æ—à–∏–±–∫–∏, errorDomain
