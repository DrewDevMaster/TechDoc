//
//  TaskBasics.swift
//  AsyncAwaitTraining
//
//  Created by ChatGPT on 2025-06-05
//

import SwiftUI

func heavyCalculation() { }

/*
üß† –ß—Ç–æ —Ç–∞–∫–æ–µ Task?

Task {} ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å–Ω–∞—Ä—É–∂–∏ sync-—Ñ—É–Ω–∫—Ü–∏–∏.
–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å await –≤ –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ onAppear –∏–ª–∏ –∫–Ω–æ–ø–∫–µ), –Ω–æ –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É Task

‚∏ª

üìå –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Task {}
    ‚Ä¢    –í–Ω—É—Ç—Ä–∏ –æ–±—ã—á–Ω–æ–π (–Ω–µ-async) —Ñ—É–Ω–∫—Ü–∏–∏.
    ‚Ä¢    –í ViewModel –∏–ª–∏ View, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫.
    ‚Ä¢    –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ (–∏–ª–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞).
    ‚Ä¢    –ö–æ–≥–¥–∞ –Ω–µ –Ω—É–∂–µ–Ω async let, –∞ –ø—Ä–æ—Å—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–ª–æ–∫.

‚ö†Ô∏è Task {} vs async let

Task {}
async let
–ì–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
–í–Ω–µ async-—Ñ—É–Ω–∫—Ü–∏–π
–í–Ω—É—Ç—Ä–∏ async-—Ñ—É–Ω–∫—Ü–∏–π
–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å
‚úÖ –î–∞
‚ùå –ù–µ—Ç (–≤—Å—Ç—Ä–æ–µ–Ω–æ, –Ω–æ –±–µ–∑ cancel)
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
‚úÖ –î–∞ (.userInitiated, –∏ —Ç.–¥.)
‚ùå –ù–µ—Ç
–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
–ö–æ–≥–¥–∞ –¥–æ–∂–¥–∞–ª–∏—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏
–ö–æ–≥–¥–∞ await –≤—ã–∑–≤–∞–Ω –Ω–∞ –≤—Å–µ—Ö

*/


struct ViewForTestingTask: View {
    
    @State var title = "button"
    
    var body: some View {
        Button(title) {
            //
            Task {
                let str = try await fetchProfile()
                print(str)
                title = str
            }
        }
    }
}
               

// MARK: - ViewModel using Task

final class MyViewModel: ObservableObject {
    @Published var text = ""

    func fetch() {
        Task {
            let data = await loadData()
            await MainActor.run {
                self.text = data
            }
        }
    }

    func loadData() async -> String {
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        try? await Task.sleep(nanoseconds: 2_000_000_000)
        return "–û—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞"
    }
}

// MARK: - View demonstrating Task usage

struct MyTaskExampleView: View {
    @StateObject private var viewModel = MyViewModel()

    var body: some View {
        VStack(spacing: 20) {
            Text(viewModel.text.isEmpty ? "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É" : viewModel.text)
                .padding()

            Button("–ó–∞–≥—Ä—É–∑–∏—Ç—å") {
                viewModel.fetch()
            }
            .buttonStyle(.borderedProminent)
        }
        .padding()
    }
}

#Preview {
    MyTaskExampleView()
}

/*
 üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:
     1.    –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—É—é View —Å –∫–Ω–æ–ø–∫–æ–π.
     2.    –ü–æ –Ω–∞–∂–∞—Ç–∏—é –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è Task {}.
     3.    –í–Ω—É—Ç—Ä–∏ Task –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è await-—Ñ—É–Ω–∫—Ü–∏—è loadUserData(), –∫–æ—Ç–æ—Ä–∞—è –∂–¥—ë—Ç 2 —Å–µ–∫—É–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É.
     4.    –û—Ç–æ–±—Ä–∞–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
 */


// MARK: - Task vs Task.detached Explanation

// Task {}
// - –ù–∞—Å–ª–µ–¥—É–µ—Ç actor context, –Ω–∞–ø—Ä–∏–º–µ—Ä, @MainActor
// - –ù–∞—Å–ª–µ–¥—É–µ—Ç task-local values (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
// - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è UI –∏ ViewModel –ª–æ–≥–∏–∫–∏
// - –ú–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ

// Task.detached {}
// - –ù–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç –Ω–∏ actor context, –Ω–∏ task-local values
// - –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
// - –•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
// - –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ MainActor –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI

// MARK: - –ü—Ä–∏–º–µ—Ä Task {}

@MainActor
final class ExampleViewModel: ObservableObject {
    @Published var name = ""

    func loadData() {
        Task {
            let result = try await fetchName()
            self.name = result // –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –º—ã –Ω–∞ MainActor
        }
    }
}

// MARK: - –ü—Ä–∏–º–µ—Ä Task.detached {}

func processInBackground() {
    Task.detached {
        let result = try await heavyCalculation()

        // –û–±–Ω–æ–≤–∏—Ç—å UI ‚Äî –Ω—É–∂–Ω–æ —è–≤–Ω–æ –ø—Ä—ã–≥–Ω—É—Ç—å –Ω–∞ MainActor
        await MainActor.run {
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")
        }
    }
}

// MARK: - –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

// | –ó–∞–¥–∞—á–∞                                          | –ò—Å–ø–æ–ª—å–∑—É–π          |
// |------------------------------------------------|---------------------|
// | –û–±–Ω–æ–≤–∏—Ç—å UI –∏–∑ ViewModel                       | Task {} (MainActor) |
// | –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Å–µ—Ç—å—é –∏–ª–∏ –¥–∏—Å–∫–æ–º         | Task {} –∏–ª–∏ async let |
// | –í—ã–π—Ç–∏ –∏–∑ MainActor (–Ω–∞–ø—Ä., –≤ init –±–µ–∑ UI)      | Task.detached {} |
// | –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª             | Task.detached {} |
// | –í—ã–∑–æ–≤ –≤ init() –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, –Ω–µ ViewModel   | Task.detached {} |



/*
üîç –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Task.detached {}

Task.detached –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, –Ω–µ –∑–∞–≤–∏—Å—è—â—É—é –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
    ‚Ä¢    –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç @MainActor
    ‚Ä¢    –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ Task
    ‚Ä¢    –Ω–µ–∑–∞–≤–∏—Å–∏–º –æ—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–¥–∞—á–∏ ‚Äî –±—É–¥–µ—Ç –∂–∏—Ç—å —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é

 */

 // ‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

 import SwiftUI

 // 1. Task.detached –≤ init –∫–ª–∞—Å—Å–∞
 class HeavyInitLoader {
     init() {
         Task.detached {
             let result = try await HeavyInitLoader.fetchHeavyInitialData()
             await MainActor.run {
                 print("–ì–æ—Ç–æ–≤–æ: \(result)")
             }
         }
     }

     static func fetchHeavyInitialData() async throws -> String {
         try await Task.sleep(nanoseconds: 1_000_000_000)
         return "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ init"
     }
 }

 // 2. Task.detached –¥–ª—è —Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, GPS tracking)
 final class BackgroundService {
     func start() {
         Task.detached(priority: .background) {
             while true {
                 let data = try await BackgroundService.fetchLocation()
                 await MainActor.run {
                     print("–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: \(data)")
                 }
                 try await Task.sleep(nanoseconds: 5 * 1_000_000_000)
             }
         }
     }

     static func fetchLocation() async throws -> String {
         return "Lat: 45.0, Lon: 28.0"
     }
 }

 // 3. Task.detached –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
 func logToDisk(_ message: String) {
     Task.detached {
         try await writeToDisk(message)
     }
 }

 func writeToDisk(_ message: String) async throws {
     // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
     try await Task.sleep(nanoseconds: 500_000_000)
     print("–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: \(message)")
 }

 // 4. –ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è UI
 func reportCrash(_ crash: String) {
     Task.detached {
         try await sendCrashToServer(crash)
     }
 }

 func sendCrashToServer(_ crash: String) async throws {
     try await Task.sleep(nanoseconds: 1_000_000_000)
     print("–û—Ç—á—ë—Ç –æ –∫—Ä–∞—à–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: \(crash)")
 }

 // –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
 // Task.detached –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç UI, Task-–∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏ Actor-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 // –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–π UI –Ω–∞–ø—Ä—è–º—É—é –≤–Ω—É—Ç—Ä–∏ Task.detached ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π await MainActor.run {}

/*
Task.detached {}

–í–æ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª:
    1.    –ö–æ–≥–¥–∞ —Ç—ã –≤—ã–∑—ã–≤–∞–µ—à—å Task.detached, —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (top-level task), –∫–æ—Ç–æ—Ä–∞—è:
    ‚Ä¢    –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ‚Äú–¥–æ—á–µ—Ä–Ω–µ–π‚Äù –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –∫–∞–∫–æ–º—É-–ª–∏–±–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É Task,
    ‚Ä¢    –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ @MainActor),
    ‚Ä¢    –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç task-local values (–ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏).

    2.    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:
    ‚Ä¢    –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (Task.detached {}), —Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é .medium

*/

/// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã Task –æ—Ç –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫ –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É
/// ------------------------------------------------------------
///
/// 1Ô∏è‚É£ high ‚Äî –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è, –≤—ã—à–µ —á–µ–º userInitiated
/// 2Ô∏è‚É£ userInitiated ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
/// 3Ô∏è‚É£ medium ‚Äî –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
/// 4Ô∏è‚É£ utility ‚Äî –§–æ–Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞, –¥–æ–ª–≥–∏–µ –∑–∞–¥–∞—á–∏
/// 5Ô∏è‚É£ low ‚Äî –ú–∞–ª–æ–∑–Ω–∞—á–∏–º—ã–µ –∑–∞–¥–∞—á–∏, –Ω–µ —Å—Ä–æ—á–Ω–æ
/// 6Ô∏è‚É£ background ‚Äî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ñ–æ–Ω–æ–≤–∞—è, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

// –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ TaskPriority

func runTaskPriorityExamples() {
    
    // 1Ô∏è‚É£ HIGH (–≤—ã—Å–æ—á–∞–π—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    Task.detached(priority: .high) {
        print("üî• HIGH priority task started")
        // –ü—Ä–∏–º–µ—Ä: —Å—Ä–æ—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
        // –ü—Ä–∏–º–µ—Ä: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    }
    
    /*
     
    –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è .high

    1Ô∏è‚É£ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + —Å—Ä–æ—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:

    –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∂–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ),
    –∏ —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Å—Ç—Ä–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å UI:
    
    2Ô∏è‚É£ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –æ–ø–ª–∞—Ç–∞):

    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ‚Äú–û–ø–ª–∞—Ç–∏—Ç—å‚Äù, –∏ —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ‚Äî –≤–∞–∂–Ω–µ–π—à–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:
    
    
    3Ô∏è‚É£ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å / –±–∏–æ–º–µ—Ç—Ä–∏—è:

    –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å FaceID / TouchID + –±—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞:
    
    4Ô∏è‚É£ –°—Ä–æ—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏:

    –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∏–≥—Ä–∞—Ö –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö —Å heavy animation) —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .high —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å:
    
    5Ô∏è‚É£ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è / –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ (OTP):
    –ö–æ–≥–¥–∞ –ø—Ä–∏—à–µ–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –ø–æ SMS / Email –∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ UI:
    
    –ò—Ç–æ–≥–∏

    ‚úÖ .high ‚Äî —Ä–µ–¥–∫–∏–π, –Ω–æ –≤–∞–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –≤–∞–∂–Ω–æ:
        ‚Ä¢    —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ
        ‚Ä¢    –±—ã—Å—Ç—Ä–æ
        ‚Ä¢    –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
        ‚Ä¢    –≥–¥–µ –∑–∞–¥–µ—Ä–∂–∫–∞ —É—Ö—É–¥—à–∞–µ—Ç UX –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è –ª–æ–≥–∏–∫–∏ (–ø–ª–∞—Ç–µ–∂–∏, –±–∏–æ–º–µ—Ç—Ä–∏—è, OTP, —Å–∏–Ω—Ö—Ä–æ–Ω —á–∞—Ç–∞ –∏ —Ç.–ø.)

    ‚úÖ –í–∞–∂–Ω–æ –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å .high ‚Äî –∏–Ω–∞—á–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –∏–º–µ—Ç—å —Å–º—ã—Å–ª –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    */
    
    // 2Ô∏è‚É£ USER_INITIATED
    // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–í–ù–û –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∏ –æ–∂–∏–¥–∞–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã—Å—Ç—Ä–æ.
    Task.detached(priority: .userInitiated) {
        print("üë§ USER_INITIATED priority task started")
        // –ü—Ä–∏–º–µ—Ä: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        // –ü—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞–Ω–∏–µ PDF –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–°–∫–∞—á–∞—Ç—å"
        // –ü—Ä–∏–º–µ—Ä: –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    
    // 3Ô∏è‚É£ MEDIUM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    Task.detached {
        print("‚öôÔ∏è MEDIUM (default) priority task started")
        // –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—Ä–æ—Å –≤ —Å–µ—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç UI
        // –ü—Ä–∏–º–µ—Ä: –ø–æ–¥–≥—Ä—É–∑–∫–∞ –Ω–µ –æ—á–µ–Ω—å —Å—Ä–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        // –ü—Ä–∏–º–µ—Ä: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    }
    
    // 4Ô∏è‚É£ UTILITY
    Task.detached(priority: .utility) {
        print("üîß UTILITY priority task started")
        // –ü—Ä–∏–º–µ—Ä: —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        // –ü—Ä–∏–º–µ—Ä: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤ —Ñ–æ–Ω–µ
        // –ü—Ä–∏–º–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫—ç—à–∞
    }
    
    // 5Ô∏è‚É£ LOW
    Task.detached(priority: .low) {
        print("üê¢ LOW priority task started")
        // –ü—Ä–∏–º–µ—Ä: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
        // –ü—Ä–∏–º–µ—Ä: –Ω–µ —Å—Ä–æ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        // –ü—Ä–∏–º–µ—Ä: –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª
    }
    
    // 6Ô∏è‚É£ BACKGROUND (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    Task.detached(priority: .background) {
        print("üåå BACKGROUND priority task started")
        // –ü—Ä–∏–º–µ—Ä: –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        // –ü—Ä–∏–º–µ—Ä: –∑–∞–ø–∏—Å—å telemetry —Å–æ–±—ã—Ç–∏–π
        // –ü—Ä–∏–º–µ—Ä: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–¥–∞ –¥–µ–≤–∞–π—Å –Ω–∞ –∑–∞—Ä—è–¥–∫–µ
    }
    
}

// –î–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å runTaskPriorityExamples() –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ .onAppear –≤ View
// –∏–ª–∏ –≤ AppDelegate / SceneDelegate



// MRAK: - –ß—Ç–æ —Ç–∞–∫–æ–µ task-local values

/*

üëâ –í Swift 5.5+ —É –∫–∞–∂–¥–æ–π Task –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (task-local values).
–≠—Ç–æ –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –∑–∞–¥–∞—á (Task chain).
    ‚Ä¢    –û–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –¥–æ—á–µ—Ä–Ω–∏–µ Task-–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ Task.
    ‚Ä¢    –ù–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ detached –∑–∞–¥–∞—á–∏ (Task.detached).

Task-local values ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º Swift Concurrency (–Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ).
–î–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è @TaskLocal property wrapper.

‚∏ª

–ü—Ä–∏–º–µ—Ä

–î–æ–ø—É—Å—Ç–∏–º —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
 @TaskLocal static var currentUserID: String?
 
 –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ —Ç—ã –ø–∏—à–µ—à—å:
 Task {
     currentUserID = "user123"
     
     await doSomeWork() // –í–∏–¥–∏—Ç currentUserID == "user123"
     
     Task {
         await doMoreWork() // –í–∏–¥–∏—Ç currentUserID == "user123" (–Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è!)
     }
     
     Task.detached {
         await doDetachedWork() // –ù–ï –≤–∏–¥–∏—Ç currentUserID == "user123", currentUserID == nil
     }
 }
 
 –ü–æ—á–µ–º—É —Ç–∞–∫?

 üëâ –ö–æ–≥–¥–∞ —Ç—ã —Å–æ–∑–¥–∞—ë—à—å:

 ‚úÖ Task {} ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –¥–æ—á–µ—Ä–Ω–∏–π Task, –æ–Ω –Ω–∞—Å–ª–µ–¥—É–µ—Ç:
     ‚Ä¢    –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
     ‚Ä¢    actor context
     ‚Ä¢    task-local values

 ‚úÖ Task.detached {} ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤–∞—è Task, –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç–µ–∫—É—â–µ–º—É:
     ‚Ä¢    –ù–ï –Ω–∞—Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
     ‚Ä¢    –ù–ï –Ω–∞—Å–ª–µ–¥—É–µ—Ç actor context
     ‚Ä¢    –ù–ï –Ω–∞—Å–ª–µ–¥—É–µ—Ç task-local values ‚Üí –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç

 ‚∏ª

 –î–ª—è —á–µ–≥–æ task-local values —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è
     ‚Ä¢    –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí current traceID –∏–ª–∏ requestID
     ‚Ä¢    user context ‚Üí userID, tenantID
     ‚Ä¢    feature flags ‚Üí –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ñ–∏—á–∏
     ‚Ä¢    debug flags
     ‚Ä¢    auth token
     ‚Ä¢    current locale / language

 
 
*/
//
// TaskLocalDemo.swift
// –î–æ–±–∞–≤—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–æ–µ–∫—Ç –∏ –≤—ã–∑–æ–≤–∏ TaskLocalDemo.runExample() –∏–∑ ContentView.onAppear –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.
//


// 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º Task-local –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
//
// TaskLocalDemo.swift
//

enum TaskLocalDemo {

    // Task-local value –≤–Ω—É—Ç—Ä–∏ —Ç–∏–ø–∞
    @TaskLocal
    static var requestTraceId: String?

    static func runExample() {
        print("üåü MAIN START")

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º task-local value —á–µ—Ä–µ–∑ withValue
        Self.$requestTraceId.withValue("user123") {

            print("Task: currentUserID =", requestTraceId ?? "nil")

            Task {
                print("Task: currentUserID =", requestTraceId ?? "nil")
                await doSomeWork()

                // –í–ª–æ–∂–µ–Ω–Ω—ã–π Task ‚Üí —É–Ω–∞—Å–ª–µ–¥—É–µ—Ç currentUserID
                Task {
                    print("Child Task: currentUserID =", requestTraceId ?? "nil")
                    await doSomeWork()
                }

                // Detached Task ‚Üí –ù–ï —É–Ω–∞—Å–ª–µ–¥—É–µ—Ç currentUserID
                Task.detached {
                    print("Detached Task: currentUserID =", requestTraceId ?? "nil")
                    await doSomeWork()
                }
            }
        }
    }

    static func doSomeWork() async {
        print("doSomeWork: currentUserID =", requestTraceId ?? "nil")
        try? await Task.sleep(nanoseconds: 500_000_000) // –ü–∞—É–∑–∞ 0.5 —Å–µ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    }
}

/*
 
 üåü MAIN START
 Task: currentUserID = user123
 doSomeWork: currentUserID = user123
 Child Task: currentUserID = user123
 doSomeWork: currentUserID = user123
 Detached Task: currentUserID = nil
 doSomeWork: currentUserID = nil
 
 */


func fetchUserProfile(id: Int) async throws -> UserProfile3000 {
    try await Task.sleep(nanoseconds: 500_000_000) // –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ 0.5 —Å–µ–∫
    return UserProfile3000(id: id, name: "User \(id)")
}

struct UserProfile3000 {
    let id: Int
    let name: String
}

/*
 ‚úÖ HW
 
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é fetchUserProfiles() async throws -> [UserProfile], –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç:
    ‚Ä¢    –¥–ª—è –º–∞—Å—Å–∏–≤–∞ id (–Ω–∞–ø—Ä–∏–º–µ—Ä [1,2,3,4,5]) –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å fetchUserProfile(id:) async throws -> UserProfile (–º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É —Ñ—É–Ω–∫—Ü–∏–∏).
    ‚Ä¢    –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å withTaskGroup.
    ‚Ä¢    —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤.
*/
func fetchUserProfiles() async throws -> [UserProfile3000] {
    let usresId = [22,33,55,66]
    
    return await withTaskGroup(of: UserProfile3000?.self) { group in
        
        var usersProfiles = [UserProfile3000]()

        for id in usresId {
            group.addTask {
                let profile = try? await fetchUserProfile(id: id)
                return profile
            }
        }
        
        for await profile in group {
            if let profile = profile {
                usersProfiles.append(profile)
            }
        }
        
        return usersProfiles

    }
    
}

func fetchImages() async throws -> [UIImage] {
    let urls = [
        URL(string: "https://example.com/image1.png")!,
        URL(string: "https://example.com/image2.png")!,
        URL(string: "https://example.com/image3.png")!,
        URL(string: "https://example.com/image4.png")!,
        URL(string: "https://example.com/image5.png")!
    ]
    
    return await withTaskGroup(of: UIImage?.self) { group in
        var images: [UIImage] = []
        
        for url in urls {
            group.addTask {
//                let (data, _) = try? await URLSession.shared.data(from: url)
//                return data.flatMap { UIImage(data: $0) }
                
                let result = try? await URLSession.shared.data(from: url)
                return result.flatMap { UIImage(data: $0.0) }
            }
        }
        
        for await image in group {
            if let image = image {
                images.append(image)
            }
        }
        
        return images
    }
}


struct Article3000 {
    let id: Int
    let title: String
}

/*
 
 üöÄ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (—á—É—Ç—å —Å–ª–æ–∂–Ω–µ–µ):

 –§—É–Ω–∫—Ü–∏—è loadArticles() async throws -> [Article]:
     ‚Ä¢    –£ —Ç–µ–±—è –µ—Å—Ç—å articleIDs = [101, 102, 103, 104, 105].
     ‚Ä¢    –ù–∞–ø–∏—à–∏ fetchArticle(id: Int) async throws -> Article, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É 0.3 —Å–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Article(id: id, title: "Article \(id)").
     ‚Ä¢    –ò—Å–ø–æ–ª—å–∑—É–π withTaskGroup, —á—Ç–æ–±—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏.
     ‚Ä¢    –°–æ–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤ –∏ –≤–µ—Ä–Ω–∏.

 
 
 */
func loadArticles() async throws -> [Article3000] {
    
    let articleIDs = [101, 102, 103, 104, 105]
    
    let gr = await withTaskGroup(of: Article3000?.self) { group in
        var articlesArray = [Article3000]()
        
        for articleId in articleIDs {
            group.addTask {
                let article = try? await fetchArticle(id: articleId)
                return article
            }
        }
        
        for await i in group {
            if let i {
                articlesArray.append(i)
            }
        }
        
        return articlesArray
    }
    
    return gr
}

func fetchArticle(id: Int) async throws -> Article3000 {
    try? await Task.sleep(nanoseconds: 300_000_000)
    return Article3000(id: id, title: "Article \(id)")
}

//next task

/*
 ‚Ä¢    –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é loadArticlesWithThrowingGroup() async throws -> [Article3000]:
 ‚Ä¢    –ò—Å–ø–æ–ª—å–∑—É–π withThrowingTaskGroup.
 ‚Ä¢    –û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞–≤–µ—Ä—Ö ‚Äî –Ω–µ –≥–ª–æ—Ç–∞—Ç—å try?.
 ‚Ä¢    –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω fetchArticle —É–ø–∞–ª ‚Äî –≤—Å—è –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É.
 ‚Ä¢    –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç–µ–π.
 */

enum FetchArticleError: Error {
    case failed
}

func fetchArticle4000(id: Int) async throws -> Article3000 {
    try? await Task.sleep(nanoseconds: 300_000_000)
    if Bool.random() {
        throw FetchArticleError.failed
    }
    return Article3000(id: id, title: "Article \(id)")
}

func loadArticlesWithThrowingGroup() async throws -> [Article3000] {
    
    let articleIDs = [101, 102, 103, 104, 105]

    let throwingGroup = try await withThrowingTaskGroup(of: Article3000.self) { group in
        var articleArray = [Article3000]()
        
        for id in articleIDs {
            group.addTask(priority: .medium) {
                let articleById = try await fetchArticle4000(id: id)
                return articleById
            }
        }

        for try await newArticle in group {
            articleArray.append(newArticle)
        }
// or
    /*
        do {
            for try await newArticle in group {
                articleArray.append(newArticle)
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏:", error.localizedDescription)
            throw error
        }
     */
        
        return articleArray
    }
    
    return throwingGroup
}
