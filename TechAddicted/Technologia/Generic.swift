//
//  Generic.swift
//  TechAddicted
//
//  Created by Drew on 05.06.2025.
//

import SwiftUI

/*
 –ß—Ç–æ —Ç–∞–∫–æ–µ generics. ‚Ä®–ò –∫–∞–∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—à—å?‚Ä®–ö–∞–∫ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–∏–ø?‚Ä®‚Ä®–í Swift "generics" (–∏–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã) –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–∏–±–∫–∏–µ –∏ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º —Ç–∏–ø–æ–º, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤. Generics ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.

 */

func swapValues<T>(_ a: inout T, _ b: inout T) {
    let temp = a
    a = b
    b = temp
}

enum GenericTest {
    func test() {
        
        var x = 5
        var y = 10
        swapValues(&x, &y) // –†–∞–±–æ—Ç–∞–µ—Ç —Å Int
        
        var a = "Hello"
        var b = "World"
        swapValues(&a, &b) // –†–∞–±–æ—Ç–∞–µ—Ç —Å String
    }
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º:

protocol NetworkLayer {
    func callAPI()
}

func printName<T: NetworkLayer>(_ value: T) {
    value.callAPI()
}

//–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–∏–ø–æ–º:

func compare<T: Equatable>(_ a: T, _ b: T) -> Bool {
    return a == b
}

// –ù–µ—Å–∫–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (—á–µ—Ä–µ–∑ where):

func logIfEqual<T>(_ a: T, _ b: T) where T: Equatable, T: NetworkLayer {
    if a == b {
        print("Equal: \(a)")
    }
}

/*
 
 –ì–¥–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è generics –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ?
     ‚Ä¢    Array<T>, Dictionary<Key, Value> ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç generics.
     ‚Ä¢    Optional<T> ‚Äî –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ª—é–±–æ–≥–æ —Ç–∏–ø–∞.
     ‚Ä¢    Result<Success, Failure> ‚Äî –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫—É.
 
 
 
 
 –ü–æ—á–µ–º—É generics –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞?
 
 1. –ü–∏—Å–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–∏–ø—ã
 –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, Int, String, Double)
 */


//2. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.
//–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–∏–ø –∏ –≤–∏–¥–µ—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (type-checker).)


//‚ùå –ë–µ–∑ generics (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)

class Storage {
    func save(_ value: Any, forKey key: String) {
        UserDefaults.standard.set(value, forKey: key)
    }

    func load(forKey key: String) -> Any? {
        UserDefaults.standard.object(forKey: key)
    }
}

class StorageTest {
    func test() {
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        let storage = Storage()
        storage.save(42, forKey: "userId")
        let userId = storage.load(forKey: "userId") as? String  // üí• –û—à–∏–±–∫–∞: —ç—Ç–æ Int, –∞ –Ω–µ String
    }
}

//‚úÖ –° generics (—Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)

class TypedStorage {
    func save<T: Codable>(_ value: T, forKey key: String) {
        let data = try? JSONEncoder().encode(value)
        UserDefaults.standard.set(data, forKey: key)
    }

    func load<T: Codable>(forKey key: String, as type: T.Type) -> T? {
        guard let data = UserDefaults.standard.data(forKey: key) else { return nil }
        return try? JSONDecoder().decode(type, from: data)
    }
}


class TypedStorageTest {
    func test() {
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        let storage = TypedStorage()
        storage.save(42, forKey: "userId")

        let userId: Int? = storage.load(forKey: "userId", as: Int.self) // ‚úÖ –û–ö
        let name: String? = storage.load(forKey: "userId", as: String.self) // ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ (–≤–∏–¥–Ω–∞ —Å—Ä–∞–∑—É –≤ —Ç–µ—Å—Ç–∞—Ö)
    }
}

// 3.–£–º–µ–Ω—å—à–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
// –ù–∞–ø—Ä–º–µ—Ä

struct User333 {
    let name: String
}

struct Product {
    let title: String
}

//‚ùå –ë–µ–∑ generics: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

struct UserListView: View {
    let users: [User333]

    var body: some View {
        List(users, id: \.name) { user in
            Text(user.name)
        }
    }
}

struct ProductListView: View {
    let products: [Product]

    var body: some View {
        List(products, id: \.title) { product in
            Text(product.title)
        }
    }
}

//‚úÖ –° generics: –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

struct GenericList<T, Content: View>: View {
    let items: [T]
    let id: KeyPath<T, String>
    let rowBuilder: (T) -> Content

    var body: some View {
        List(items, id: id) { item in
            rowBuilder(item)
        }
    }
}

//

struct GenericContentView: View {
    let users = [User333(name: "Alice"), User333(name: "Bob")]
    let products = [Product(title: "iPhone"), Product(title: "MacBook")]

    var body: some View {
        VStack {
            GenericList(items: users, id: \.name) { user in
                Text("üë§ \(user.name)")
            }

            GenericList(items: products, id: \.title) { product in
                Text("üì¶ \(product.title)")
            }
        }
    }
}


//4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–æ–±—â—ë–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤

class Cache<Key: Hashable, Value> {
    private var storage: [Key: Value] = [:]

    func insert(_ value: Value, for key: Key) {
        storage[key] = value
    }

    func value(for key: Key) -> Value? {
        return storage[key]
    }

    func removeValue(for key: Key) {
        storage.removeValue(forKey: key)
    }

    func removeAll() {
        storage.removeAll()
    }
}

func CacheTesting() {
    let imageCache = Cache<String, UIImage>()
    imageCache.insert(UIImage(named: "avatar")!, for: "profilePic")
    let profilePic = imageCache.value(for: "profilePic")

    let userCache = Cache<Int, User333>()
    userCache.insert(User333(name: "Alice"), for: 1)
    let user = userCache.value(for: 1)
}

// üîÅ –û–±–æ–±—â—ë–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

func filter<T>(_ input: [T], where predicate: (T) -> Bool) -> [T] {
    var result: [T] = []
    for element in input where predicate(element) {
        result.append(element)
    }
    return result
}

func testFilteration() {
    let numbers = [1, 2, 3, 4, 5]
    let even = filter(numbers) { $0 % 2 == 0 } // [2, 4]

    let users = [User333(name: "Alice"), User333(name: "Bob")]
    let filtered = filter(users) { $0.name.hasPrefix("A") } // [Alice]
}

//‚úÖ 5. –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏
//–í—ã –º–æ–∂–µ—Ç–µ –æ–±–æ–±—â–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ –∏ –∫–ª–∞—Å—Å—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª–µ–µ —á–∏—Å—Ç—É—é, –º–æ–¥—É–ª—å–Ω—É—é –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.

struct Stack<T> {
    private var elements: [T] = []

    mutating func push(_ value: T) {
        elements.append(value)
    }

    mutating func pop() -> T? {
        elements.popLast()
    }
}

func StackUsageTest () {
    var x = Stack<String>()
    let lastItem = x.pop()
}

//

protocol APIModel: Decodable {}

struct User1: APIModel {
    let id: Int
    let name: String
}

struct Product1: APIModel {
    let id: Int
    let title: String
}

class NetworkServiceTech {
    func fetch<T: APIModel>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "EmptyData", code: -1)))
                return
            }

            do {
                let decoded = try JSONDecoder().decode(T.self, from: data)
                completion(.success(decoded))
            } catch {
                completion(.failure(error))
            }
        }.resume()
    }
}

func usageNetworkService() {
    let userURL = URL(string: "https://example.com/user.json")!
    let productURL = URL(string: "https://example.com/product.json")!

    let service = NetworkServiceTech()

    service.fetch(from: userURL) { (result: Result<User1, Error>) in
        switch result {
        case .success(let user):
            print("User loaded:", user)
        case .failure(let error):
            print("Error:", error)
        }
    }

    service.fetch(from: productURL) { (result: Result<Product1, Error>) in
        // ...
    }
}
