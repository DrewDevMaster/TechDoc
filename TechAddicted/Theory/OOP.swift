//
//  OOP+SOLID.swift
//  TechAddicted
//
//  Created by ViktorM1Max on 18.06.2025.
//

import Foundation

/*
 
 Класс — это шаблон или чертёж, по которому создаются объекты.
 Он описывает структуру (свойства) и поведение (методы) объектов.
 
 Объект (экземпляр класса) — это конкретная реализация класса, с конкретными значениями.
 
 
 ============== Инкапсуляция ==============
 
 Инкапсуляция — это сокрытие внутренней реализации объекта и предоставление доступа только через публичный интерфейс (например, методы).
 Зачем нужна?
    •    Защита данных от неправильного использования.
    •    Контроль доступа к свойствам и методам.
    •    Упрощение интерфейса для других объектов.
    •    Возможность изменять реализацию без влияния на другие части кода.
 
 Ключевые средства инкапсуляции:
     •    модификаторы доступа: private, fileprivate, internal, public, open
     •    геттеры/сеттеры
     •    методы как точка доступа к данным
 
 private - Только внутри того же файла и того же типа (например, класса/структуры/extension)
 fileprivate - Только внутри того же файла (даже из других типов в файле)
 internal - Во всех типах в том же модуле/приложении (по умолчанию все класса/структуры/extension являются internal)
 public - Доступен из других модулей, но нельзя переопределить или унаследовать !!!!!!
 open - То же что и public, но можно переопределять и наследовать в других модулях
 
 
 ============== Наследование ==============

 Наследование — это механизм, позволяющий одному классу (подклассу) наследовать свойства и методы другого класса (суперкласса).
 
 Зачем нужно наследование?
     •    Повторное использование кода
     •    Расширение и настройка поведения базового класса
     •    Организация кода в иерархии (например, UIView → UILabel, UIButton, и т.д.)
 
 Важно:
     •    В Swift классы могут наследоваться только от одного суперкласса (одиночное наследование).
     •    Структуры (struct) не поддерживают наследование, только протоколы.
     •    Чтобы класс был унаследован в другом модуле, он должен быть open.
 
 
 ============== Полиморфизм ==============
 
 Полиморфизм (от греч. “много форм”) — это способность объектов разных типов реализовывать один и тот же интерфейс или метод, но по-своему.
 
 Виды полиморфизма:
     1.    Переопределение методов (override) — классический наследственный полиморфизм.
     2.    Протокольный полиморфизм — реализация одного протокола разными типами.
     3.    Ad-hoc полиморфизм — перегрузка функций/операторов (например, + для Int и String).
     4.    Generic-полиморфизм — с помощью дженериков (T, U и т.д.)
 
 Зачем нужен полиморфизм?
     •    Упрощает код: можно работать с группой объектов через общий тип.
     •    Повышает гибкость и масштабируемость.
     •    Позволяет легко добавлять новые типы без изменения существующего кода (принцип Open/Closed).
 
 
 ============== Абстракция ==============
 
 Абстракция — это процесс выделения только значимых характеристик объекта, скрывая сложные детали реализации.
 
 Цель абстракции:
     •    Спрятать сложность системы.
     •    Упростить взаимодействие с объектами.
     •    Работать с объектами на более высоком уровне.
 
 Разница между абстракцией и инкапсуляцией:
    • Абстракция - Скрывает что делает объект ||| Инкапсуляция - Скрывает как он это делает
    • Абстракция - Ориентирована на внешний интерфейс  ||| Инкапсуляция - Ориентирована на внутреннюю реализацию
    • Абстракция - Использует протоколы, абстрактные классы  ||| Инкапсуляция - Использует модификаторы доступа
 
 Как достигается абстракция в Swift:
     •    Через протоколы (protocol)
     •    Через абстрактные концепции (например, классы с не реализованными методами — через fatalError())
     •    Через скрытие деталей за публичным API

 */

